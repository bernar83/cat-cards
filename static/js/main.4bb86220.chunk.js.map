{"version":3,"sources":["components/CatCard/CatCard.js","components/CatButton/CatButton.js","components/CatTable/CatTable.js","App.js","serviceWorker.js","index.js"],"names":["CatCard","_ref","fact","date","id","react_default","a","createElement","Card_default","key","className","CardContent_default","Typography_default","variant","component","color","Date","toDateString","CatButton","getCats","Button_default","onClick","CatTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","isLoading","axios","get","then","cats","data","catch","err","console","log","state","index_es","container","justify","item","components_CatButton_CatButton","spacing","CircularProgress_default","size","map","cat","xs","md","lg","_id","components_CatCard_CatCard","text","updatedAt","Component","App","AppBar_default","position","Toolbar_default","components_CatTable_CatTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qZA0BeA,MAnBC,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,GAC7B,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,IAAKL,EAAIM,UAAU,YACvBL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,KAAKC,UAAU,MAAnC,QAGAT,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYQ,UAAU,KAAKZ,GAC3BG,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYS,MAAM,iBAOX,IAAIC,KAPkCb,GAQvCc,oCCZCC,EARG,SAAAjB,GAAiB,IAAdkB,EAAclB,EAAdkB,QACnB,OACEd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAQe,QAASF,EAASN,QAAQ,YAAYE,MAAM,WAApD,wCCkEWO,sBA7Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRJ,QAAU,WACRK,EAAKO,SAAS,CAAEC,WAAW,IAG3BC,IACGC,IAFD,wEAGCC,KAAK,SAAAC,GACJZ,EAAKO,SAAS,CAAEK,KAAMA,EAAKC,KAAML,WAAW,MAE7CM,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MApBhBf,EAAKkB,MAAQ,CACXN,KAAM,GACNJ,WAAW,GAJIR,mFASjBG,KAAKR,2CAkBL,OACEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,4BACbL,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtBxC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAMG,MAAI,EAACpC,UAAU,sCACnBL,EAAAC,EAAAC,cAACwC,EAAD,CAAW5B,QAASQ,KAAKR,YAG7Bd,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAMC,WAAS,EAACI,QAAS,GACtBrB,KAAKe,MAAMV,UACV3B,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtBxC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAMG,MAAI,EAACpC,UAAU,+BACnBL,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,CAAkB4C,KAAM,OAI5BvB,KAAKe,MAAMN,KAAKe,IAAI,SAAAC,GAClB,OACE/C,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAMG,MAAI,EAACO,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAG9C,IAAK2C,EAAII,KACxCnD,EAAAC,EAAAC,cAACkD,EAAD,CACEvD,KAAMkD,EAAIM,KACVvD,KAAMiD,EAAIO,UACVvD,GAAIgD,EAAII,IACR/C,IAAK2C,EAAII,kBAlDNI,cCgBRC,mLAfX,OACExD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuD,EAAAxD,EAAD,CAAQyD,SAAS,SAAShD,MAAM,WAC9BV,EAAAC,EAAAC,cAACyD,EAAA1D,EAAD,KACED,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,KAAKE,MAAM,WAA/B,eAKJV,EAAAC,EAAAC,cAAC0D,EAAD,cAXUL,aCIEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.4bb86220.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport \"./CatCard.css\";\n\nconst CatCard = ({ fact, date, id }) => {\n  return (\n    <Card key={id} className=\"cat-card\">\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\">\n          Fact\n        </Typography>\n        <Typography component=\"p\">{fact}</Typography>\n        <Typography color=\"textSecondary\">{setToDate(date)}</Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nfunction setToDate(dateObject) {\n  const date = new Date(dateObject);\n  return date.toDateString();\n}\n\nexport default CatCard;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\n\nconst CatButton = ({ getCats }) => {\n  return (\n    <Button onClick={getCats} variant=\"contained\" color=\"primary\">\n      New Facts!\n    </Button>\n  );\n};\n\nexport default CatButton;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport CatCard from \"../CatCard/CatCard\";\nimport CatButton from \"../CatButton/CatButton\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { Grid } from \"@material-ui/core\";\n\nimport \"./CatTable.css\";\n\nclass CatTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cats: [],\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    this.getCats();\n  }\n\n  getCats = () => {\n    this.setState({ isLoading: true });\n    const url =\n      \"https://cat-fact.herokuapp.com/facts/random?animal_type=cat&amount=9\";\n    axios\n      .get(url)\n      .then(cats => {\n        this.setState({ cats: cats.data, isLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"cat-table__cat-card-grid\">\n        <Grid container justify=\"center\">\n          <Grid item className=\"cat-table__get-cats-button-wrapper\">\n            <CatButton getCats={this.getCats} />\n          </Grid>\n        </Grid>\n        <Grid container spacing={8}>\n          {this.state.isLoading ? (\n            <Grid container justify=\"center\">\n              <Grid item className=\"cat-table__progress-wrapper\">\n                <CircularProgress size={80} />\n              </Grid>\n            </Grid>\n          ) : (\n            this.state.cats.map(cat => {\n              return (\n                <Grid item xs={12} md={6} lg={4} key={cat._id}>\n                  <CatCard\n                    fact={cat.text}\n                    date={cat.updatedAt}\n                    id={cat._id}\n                    key={cat._id}\n                  />\n                </Grid>\n              );\n            })\n          )}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default CatTable;\n","import React, { Component } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport \"typeface-roboto\";\nimport CatTable from \"./components/CatTable/CatTable\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar>\n            <Typography variant=\"h3\" color=\"inherit\">\n              Cat Facts\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <CatTable />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}